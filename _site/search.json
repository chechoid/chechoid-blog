[
  {
    "objectID": "posts/haciendo-boludeces-en-r/index.html",
    "href": "posts/haciendo-boludeces-en-r/index.html",
    "title": "Haciendo boludeces en R",
    "section": "",
    "text": "Una vez vi una charla de Ryan Timpe, un Data Scientist de Lego, que en una charla en la RStudio Conference contaba cómo a veces hacía proyectos que fueran divertidos para aprender nuevos skills de análisis de datos. En su charla cuenta por ejemplo, que hizo un análisis de los diálogos de la serie The Golden Girls usando técnicas de text mining para detectar cuáles eran las palabras más frecuentes, entonces cada vez que una protagonista decía esa palabra ellos hacían un fondo blanco de lo que estuvieran tomando.\nEste post va de lo mismo. Yo quería aprender a usar imágenes en mis visualizaciones, así nació este proyecto en el que usé imágenes de personas con rasgos “similares” a los míos e incluir las fotos en un gráfico de dispersión.\nEsto que es una boludez implicó:\n\nCrear un formulario en Google Forms\nLevantar los datos de las respuestas\nProcesar los resultados\nE incluir visualizaciones usando las imágenes de las personas.\n\nEste tipo de proyectos lo que permite es que el esfuerzo que dedicás a aprender no se sienta pesado, y que te da una motivación extra para buscar la solución para lograr el resultado."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "El blog de Checho",
    "section": "",
    "text": "fun\n\n\nggplot2\n\n\n\n\n\n\n\n\n\n\n\nChecho\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/haciendo-boludeces-en-r/index.html#génesis-de-la-idea-k-nn",
    "href": "posts/haciendo-boludeces-en-r/index.html#génesis-de-la-idea-k-nn",
    "title": "Haciendo boludeces en R",
    "section": "Génesis de la idea: k-nn",
    "text": "Génesis de la idea: k-nn\nLa idea de este análisis surgió un día después de hacer una explicación sobre un método de clustering llamado k-nn. Los métodos de clustering son técnicas de ciencia de datos que permiten hallar grupos entre los datos (llamados clusters en la jerga).\nEl método k-nn, k nearest neighbors o de vecinos más cercanos lo que hace es asignar a cada individuo a un cluster en función de las características de sus “vecinos”. Es decir que determina a qué grupo pertenece cada caso en función a qué casos se parece más.\nLa forma que se me ocurrió para explicar esto de manera visual fue con este dibujo que hice en Paint:\n\nLa explicación es que yo, dentro de ese conjunto de datos, estoy más cerca de pertenecer al cluster del Mono Burgos y de Nicolás del Caño, más que del cluster de Keanu Reeves, Jeff Bridges y Brad Pitt.\nY después tuve una idea. ¿Y si hago esto con datos?"
  },
  {
    "objectID": "posts/haciendo-boludeces-en-r/index.html#cargando-los-datos-y-preparándolos",
    "href": "posts/haciendo-boludeces-en-r/index.html#cargando-los-datos-y-preparándolos",
    "title": "Haciendo boludeces en R",
    "section": "Cargando los datos y preparándolos",
    "text": "Cargando los datos y preparándolos\nEmpecemos cargando las librerías y los datos directamente desde un repositorio:\n\n# Paquetes\nlibrary(tidyverse) # Cargar, limpiar y preparar datos\nlibrary(ggimage)   # Para usar imágenes en las visualizaciones\n\n# Datos\nclones <- read_delim(\"https://raw.githubusercontent.com/chechoid/silliest-use-of-r/main/source.csv\", delim = \";\")\n\n\ncomentarios <- clones %>% \n  select(comentarios = `Poné lo que quieras... parecidos, chistes, comentarios, etc...`) %>% \n  filter(!is.na(comentarios))\n\n# Exploremos los datos\nhead(clones)\n\n# A tibble: 6 × 24\n  `Marca temporal`    Facha de…¹ Copad…² Facha…³ Copad…⁴ Facha…⁵ Copad…⁶ Facha…⁷\n  <dttm>                   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 2021-06-23 12:37:28         10      10       7      10       1       1       1\n2 2021-06-23 12:39:12          4      10       5       9       1       1       1\n3 2021-06-23 12:42:21          8       9       8       9       5       4       3\n4 2021-06-23 12:43:24         10      10       1       1       1       1       1\n5 2021-06-23 12:45:03         10       8       4       9       6       9       1\n6 2021-06-23 12:45:12          5       9       1       8      10       8       1\n# … with 16 more variables: `Copadez de Roberto` <dbl>, `Facha de Jeff` <dbl>,\n#   `Copadez de Jeff` <dbl>, `Facha de Brad` <dbl>, `Copadez de Brad` <dbl>,\n#   `Facha del Mono` <dbl>, `Copadez del Mono` <dbl>, `Facha de Sergio` <dbl>,\n#   `Copadez de Sergio` <dbl>, `Facha de Ricky` <dbl>,\n#   `Copadez de Ricky` <dbl>, `Facha de Ben` <dbl>, `Copadez de Ben` <dbl>,\n#   `Facha de Javier` <dbl>, `Copadez de Javier` <dbl>,\n#   `Poné lo que quieras... parecidos, chistes, comentarios, etc...` <chr>, …\n# ℹ Use `colnames()` to see all variable names\n\n\nAhí podemos ver que para cada personaje tenemos una columna con el puntaje de su facha y su puntaje de copadez.\nEl siguiente paso consiste en eliminar algunas columnas que no son relevantes para el análisis, y agregamos una columna de id. Y luego tenemos que “pivotear” la tabla para que nos queden todas las columnas de puntajes de los personajes en dos columnas:\n\n# Eliminar columnas innecesarias\nclones <- clones %>% \n  select(-`Marca temporal`, -`Poné lo que quieras... parecidos, chistes, comentarios, etc...`)\n\n# Agregar columna de id\nclones <- clones %>% \n  rowid_to_column(var = \"id\")\n\n# Pivotear variables\nclones <- clones %>% \n  pivot_longer(cols = c(\"Facha de Keanu\": \"Copadez de Javier\"),\n               names_to = \"personaje\",\n               values_to = \"puntaje\")\n\n# Veamos como queda el dataset ahora\nhead(clones)\n\n# A tibble: 6 × 3\n     id personaje          puntaje\n  <int> <chr>                <dbl>\n1     1 Facha de Keanu          10\n2     1 Copadez de Keanu        10\n3     1 Facha de Russell         7\n4     1 Copadez de Russell      10\n5     1 Facha de Nico            1\n6     1 Copadez de Nico          1\n\n\nHabíamos comenzado con un dataset de 66 filas y 24 columnas. Ahora terminamos con un data frame de 1.452 filas en 3 columnas. Ahora necesitamos eliminar las palabras intermedias de y del de los nombres en la columna personaje así después podemos crear una columna para facha, y otra para copadez.\n\n# Separar variables categóricas\nclones <- clones %>% \n  mutate(personaje = str_remove(personaje, \"de \"),\n         personaje = str_remove(personaje, \"del \"))\n\n# Veamos el puntaje promedio de cada personaje y sus caraceterísticas\nclones %>% \n  group_by(personaje) %>% \n  summarise(valor_promedio = mean(puntaje)) %>% \n  ggplot(aes(x = valor_promedio, y = personaje)) +\n  geom_point(size = 2)\n\n\n\n# Dividimos la columna 'personaje' en dos columnas, una para la métrica y otra para el nombre\nclones <- clones %>% \n  separate(personaje,  into = c(\"metrica\", \"persona\"))\n\n\n# Pivotear ancho \nclones <- clones %>% \n  pivot_wider(id_cols = c(id, persona),\n              names_from = metrica,\n              values_from = puntaje)\n\n# Veamos como queda el data frame ahora\nhead(clones)\n\n# A tibble: 6 × 4\n     id persona Facha Copadez\n  <int> <chr>   <dbl>   <dbl>\n1     1 Keanu      10      10\n2     1 Russell     7      10\n3     1 Nico        1       1\n4     1 Roberto     1       1\n5     1 Jeff        5       5\n6     1 Brad       10      10\n\n\nLuego de estos pasos quedamos con un data frame de 726 filas, una para cada votación para cada personaje, y con 4 columnas, id, persona, Facha y Copadez. Con estos datos podemos ver los resultados de cada persona:\n\n# Calculamos los resultados promedios para cada persona y graficamos los resultados\nresultados <- clones %>% \n  group_by(persona) %>% \n  summarise(facha_promedio = mean(Facha),\n            copadez_promedio = mean(Copadez))\n\nggplot(resultados, aes(x = copadez_promedio, y = facha_promedio, color = persona)) +\n  geom_point(size = 3)\n\n\n\n\nEn esencia, este es el gráfico al que queremos llegar. Así como está es medio aburrido, así que vamos a enchular este gráfico con imágenes."
  },
  {
    "objectID": "posts/haciendo-boludeces-en-r/index.html#trabajando-con-las-imágenes",
    "href": "posts/haciendo-boludeces-en-r/index.html#trabajando-con-las-imágenes",
    "title": "Haciendo boludeces en R",
    "section": "Trabajando con las imágenes",
    "text": "Trabajando con las imágenes\nComo contaba antes, primero armé una presentación en Canva y pegué todas las imágenes de cada personaje para que queden más o menos del mismo tamaño. Luego guardé cada imagen en un archivo separado, y en este caso las guardé en una carpeta que se llama clones.\nPodría haber hecho la carga de las fotos una por una, pero quería hacer este trabajo lo más eficiente posible tratando de repetir pasos. Para eso tenemos que crear un data frame que tenga por un lado el nombre de la persona tal cual lo tenemos en la tabla de las votaciones, y que incluya la dirección a la imagen.\n\n# Creamos un vector con los nombres de las personas\npersona <- resultados %>% \n  select(persona) %>% \n  pull()\n\n# Creo un vector de imágenes\nruta <- \"pics\"        # Ruta de las fotos\nextension <- \"png\"   # Extensión de los archivos de imágenes\n\n# nombres de los archivos\nimagen <- c(\"Ben\", \"Brad\", \"Javier\", \"jeff\", \"keanu\", \"mono\", \"nico\", \n            \"ricky\", \"roberto\", \"russell\", \"sergio\")\n\n# Creo el vector de fotos con dirección y extensión completa\nfoto <- str_c(ruta, imagen, sep = \"/\")\nfoto <- str_c(foto, extension, sep = \".\")\n\n# Creo el dataframe y lo agrego al dataframe resultados\npics <- data.frame(persona, foto)\n\n# Ver el resultado de este proceso\npics\n\n   persona             foto\n1      Ben     pics/Ben.png\n2     Brad    pics/Brad.png\n3   Javier  pics/Javier.png\n4     Jeff    pics/jeff.png\n5    Keanu   pics/keanu.png\n6     Mono    pics/mono.png\n7     Nico    pics/nico.png\n8    Ricky   pics/ricky.png\n9  Roberto pics/roberto.png\n10 Russell pics/russell.png\n11  Sergio  pics/sergio.png\n\n\nAhora tenemos un data frame de 11 filas y dos columnas, con el nombre de cada persona, y la dirección al archivo que contiene las imágenes de cada una. Estos datos lo podemos integrar al data frame que veníamos trabajando con los resultados de Facha y Copadez promedio de cada personaje.\n\n# Unimos los datasets\nresultados <- left_join(resultados, pics)\n\nhead(resultados)\n\n# A tibble: 6 × 4\n  persona facha_promedio copadez_promedio foto           \n  <chr>            <dbl>            <dbl> <chr>          \n1 Ben               8.23             6.47 pics/Ben.png   \n2 Brad              8.52             7.55 pics/Brad.png  \n3 Javier            6.89             6.56 pics/Javier.png\n4 Jeff              5.06             6.45 pics/jeff.png  \n5 Keanu             7.77             8.74 pics/keanu.png \n6 Mono              3.30             6.30 pics/mono.png"
  },
  {
    "objectID": "posts/haciendo-boludeces-en-r/index.html#poniendo-imágenes-al-gráfico",
    "href": "posts/haciendo-boludeces-en-r/index.html#poniendo-imágenes-al-gráfico",
    "title": "Haciendo boludeces en R",
    "section": "Poniendo imágenes al gráfico",
    "text": "Poniendo imágenes al gráfico\nY ahora si, a lo que venimos: incluir las fotos en el gráfico\n\n# El gráfico final\nggplot(resultados, aes(x = copadez_promedio, y = facha_promedio)) +\n  geom_image(aes(image=foto), size = 0.08) +\n  theme_minimal() +\n  scale_x_continuous(limits = c(1,10)) +\n  scale_y_continuous(limits = c(1,10)) +\n  labs(title = \"Facha y Copadez Promedio de cada Personaje\",\n       x = \"Copadez Promedio\", \n       y = \"Facha Promedio\",\n       caption = \"n = 66\\nNinguna tía participó del relevamiento\")"
  }
]