---
title: "Cargar Campos de Fecha desde Excel Sin Errores"
date: "12/09/2023"
lang: es
author: "Checho"
categories: [tipito, tip, an√°lisis, date, fecha]
format:
  html:
    toc: true
    toc-location: left
    code-fold: true
    code-summary: "Ver c√≥digo"
    code-copy: hover
execute: 
  warning: false
  error: false
  message: false
  dpi: 300
---

¬øA qui√©n no le pas√≥ esto alguna vez?

![](data/phoebe_joey.jpg){fig-align="center" width="464"}

Esto en R muchas veces tambi√©n nos trae dolores de cabeza as√≠ que en esto post vamos a ver c√≥mo podemos solucionar esto.

# El C√≥digo

## Paquetes

Para este ejemplo vamos a utilizar 3 paquetes, `openxlsx` que nos permite cargar y guardar archivos de Excel, `dplyr` para manipular y limpiar datos (pod√©s ver un [tutorial ac√°](https://youtu.be/-AXzusX4Cmo)). Tambi√©n vamos a usar el paquete `janitor` para limpiar los nombres de las columnas a un formato m√°s f√°cil de utilizar (elimina tildes, pasa todo a min√∫scula y reemplaza espacios por guiones, por ejemplo).

El primer paso, en caso que no los tengas a√∫n, es instalar los paquetes:

```{r packages_instalation}
#| eval: false
#| echo: true

# Instalar paquetes
install.packages("openxlsx") # Cargar y guardar archivos de Excel
install.packages("dplyr")    # Manipular y limpiar datos
install.packages("janitor")  # Entre otras cosas, facilitar manipulaci√≥n de columnas
```

Una vez que termina la instalaci√≥n, hay que cargarlos. No vamos a cargar el paquete `janitor` porque s√≥lo vamos a usar una funci√≥n.

Cargar un paquete "deja activas" todas las funciones del paquete, lo cual implica un consumo de memoria, muchas veces √≠nfimo, pero consumo al fin, as√≠ que en este caso mostraremos como usar una funci√≥n sin cargar todas las funciones del paquete.

```{r carga}
#| warning: false
#| message: false

# Cargar paquetes
library(openxlsx)
library(dplyr)
```

## Los datos

El caso que usaremos de ejemplo simula ser una base de Postulantes de una b√∫squeda que llevamos adelante para una vacante de People Analytics. Primero carguemos los datos que est√°n almacenados en una carpeta llamada `data`.

```{r datos}
# Cargar los datos en R
datos <- read.xlsx("data/Postulantes.xlsx") %>% 
  janitor::clean_names() # Usamos solo la funci√≥n clean_names() sin cargar todo el paquete janitor
```

Ahora veamos los datos que tenemos cargados:

```{r}
# Ver los datos cargados
datos

# Hagamos un zoom en los campos que contienen fechas
datos %>% 
  select(fecha_sourcing, fecha_ultimo_contacto)
```

En la tabla anterior vemos que el valor que obtenemos en la primera columna es `44729`, el n√∫mero que representa a la fecha `17/6/22` como podemos apreciar en el archivo original:

![](data/excel_vista.png)

Ahora veremos c√≥mo podemos resolver este problema.

## Soluci√≥n

Para empezar, seleccionemos algunas columnas nom√°s usando la funci√≥n `select()`. Vamos a seleccionar los campos de `fecha_sourcing` que representa cu√°ndo inici√≥ la b√∫squeda, `nombre`, `empresa`, y `fecha_ultimo_contacto` donde anotamos cu√°ndo fue la √∫ltima vez que nos pusimos en contacto con cada persona.

```{r seleccion}
# Seleccionar los campos con fechas, nombre y empres y sobreescribo el data frame
datos <- datos %>% 
  select(fecha_sourcing, nombre, empresa, fecha_ultimo_contacto)

# Ver el nuevo dataframe
datos
```

Ahora nos quedamos con un data frame de 5 filas y 4 columnas.

Para transformar el campo `fecha_sourcing` de un formato num√©rico a un formato de tipo fecha, vamos a usar la funci√≥n `as.Date()` de R base.

```{r transformacion_1}
# Transformar el campo fecha_sourcing a tipo fecha
datos %>% 
  mutate(fecha_sourcing = as.Date(fecha_sourcing,          # Sobrescribimos el campo fecha_sourcing
                                  origin = "1899-12-30",   # Fecha de origen para el conteo
                                  tz = "UTC"))             # Huso horario
```

El trabajo con fechas siempre fue complejo desde el punto de vista del an√°lisis de datos. Especialmente con los distintos formatos que se usan en el mundo, por ejemplo `dd/mm/aaaa` en Sudam√©rica, o `mm/dd/aaaa` en Estados Unidos por ejemplo. R, cuando un campo fecha carga correctamente, lo transforma a un formato ISO 8601 `aaaa-mm-dd`.

![](data/perfect_date.jpg){width="323"}

El primer n√∫mero que obtuvimos cuando cargamos la tabla en R (el `44729`) significa que desde el 30 de diciembre de 1899 hasta el 17 de Junio de 2022 pasaron 44.729 d√≠as. De ah√≠ el n√∫mero que obtuvimos en la carga.

El par√°metro `tz`, nos permite especificar el huso horario del registro. Para algunos casos puede ser relevante, pero para la mayor√≠a de los casos de uso que le dar√≠amos en RRHH, es un par√°metro que podemos incluir o no.

### Cambiar varios campos a la vez

Con la tabla que estamos usando de ejemplo, no hay mucho problema en repetir el paso ya que √∫nicamente tenemos dos campos de fechas. ¬øPero qu√© pasa si tenemos 6, 7, o m√°s campos de fechas en un archivo? Repetir estos pasos manualmente va a hacer confuso nuestro c√≥digo y m√°s complejo de mantener.

Veamos una forma de cambiar todos los campos de fecha usando algunas funciones auxiliares del paquete `dplyr`.

```{r transformacion2}
# Cambios los dos campos de fecha a la vez
datos %>% 
  mutate(across(starts_with("fecha"),
                ~as.Date(.x,
                         tz = "UTC",
                         origin = "1899-12-30")))
```

En este caso usamos la funci√≥n `across()` para indicarle a R que ejecute la funci√≥n (en este ejemplo, `as.Date()`) en todas las variables que cumplan con alg√∫n criterio. En este ejemplo, nos valemos de otra funci√≥n auxiliar, `starts_with()`, que como su nombre en ingl√©s lo indica, va a ejecutar la funci√≥n en todas las columnas que empiecen con el t√©rmino `"fecha"`.

Este ejemplo funciona porque los campos que contienen una fecha comienzan con el nombre *fecha*. Por eso es importante al momento de dise√±ar una base de datos, un formulario, o cualquier registro que utilicemos para que haya una consistencia entre los nombres de los campos para facilitarnos posteriormente el proceso y an√°lisis de datos, independiemente del software que utilicemos.

Presten atenci√≥n a que delante de la funci√≥n `as.Date()` usamos este s√≠mbolo (`~` ) llamado virgulilla (en Neuqu√©n, Argentina, le dr√≠amos √±uflo). Con ese s√≠mbolo le indicamos a R que esa va a ser la funci√≥n que vamos a replicar en todos los campos.

El argumento `.x`, representa a todas las columnas que hab√≠amos seleccionado con las funciones `across()` y `starts_with()`. Es decir que es la forma que tiene R de simplificar cu√°les son los campos que tiene que transformar sin que le tengamos que indicar uno por uno cuales son.

# Todo lo anterior en un tweet

Este post lo hice originalmente en 2022, y recuerdo que al d√≠a siguiente de haberlo publicado, me encontr√© con el paquete `anytime` desarrollado por [Dirk Eddelbuettel](https://dirk.eddelbuettel.com/), que resuelve muchos de estos inconvenientes en un tuit (es decir, con pocas l√≠neas de c√≥digo).

Carguemos los datos nuevamente:

```{r datos2}
# Cargar los datos en R
datos <- read.xlsx("data/Postulantes.xlsx") %>% 
  janitor::clean_names() # Usamos solo la funci√≥n clean_names() sin cargar todo el paquete janitor

# Seleccionemos dos campos nada m√°s
datos2 <- datos %>% 
  select(apellido, fecha_ultimo_contacto)
```

Ahora instalemos el paquete `anytime`:

```{r install_anytime}
#| eval: false

# Instalar 'anytime'
install.packages("anytime")

```

El pr√≥ximo paso es cargar el paquete.

```{r load_anytime}
#| message: false
#| warning: false

# Cargar anytime
library(anytime)

```

Para corregir la forma en que el campo fecha est√° cargado desde Excel s√≥lo tenemos que hacer lo siguiente:

```{r anytime_in_action}

# Sobreescribir el campo de fecha
datos2 <- datos2 %>% 
  mutate(fecha_ultimo_contacto = anydate(fecha_ultimo_contacto))

# Ver los resultados
datos2
```

En este ejemplo, el a√±o no es el correcto y si prestamos atenci√≥n en vez de 27 de Junio, nos arroja **28 de Junio**. Esto es un efecto de cu√°l es la fecha que se toma de origen: en los ejemplos anteriores ve√≠amos que defin√≠amos `1899-12-30`, en cambio el paquete `anytime` usa `1/1/1970`. Esto explica en parte los problemas que nos causa Excel con las fechas (y R tambi√©n, digamos todo).

Incluso el origen del archivo puede ser un problema. Por ejemplo, si genero un archivo de Excel o un csv en Argentina, donde usamos el formato de fecha `dd/mm/yyyy` (d√≠a, mes, a√±o), y se lo mando a una persona en Estados Unidos donde usan el formato de fecha `mm/dd/yyyy` (mes, d√≠a, a√±o) puede generar que algo que funciona en un lado, no funcione en otro.

Por eso si bien este ejemplo no es perfecto, quer√≠a compartirlo porque el c√≥digo es s√∫per simple, y adem√°s a Dirk, el creador del paquete, le encant√≥ este meme:

![](data/anytime_meme.webp)

As√≠ que si bien trabajar con fechas y horas siempre es complejo, independientemente si est√°s trabajando con R, Python, Excel, o Power BI. Con este post quer√≠amos mostrar una forma de hacerlo. Tambi√©n existe el paquete `lubridate` que permite trabajar y hacer c√°lculos con fechas y del cual hicimos un tutorial que pod√©s ver en [YouTube](https://youtu.be/rU5153nki7c) y descargar el c√≥digo desde [GitHub](https://github.com/r4hr/club_de_r/blob/master/Sesion_27_Lubridate.R).

Si bien, los paquetes como `lubridate` o `anytime` son m√°s intuitivos de usar, a veces por un tema de falta de mantenimiento, versiones diferentes, o performance, conviene usar las funciones de R base.

# La comunidad de R4HR ü•ù

R4HR, la comunidad que tambi√©n llamamos el Club de R para RRHH es una comunidad de aprendizaje de programaci√≥n en R destinada para todas las personas que trabajan o quieran trabajar en RRHH en todas partes del mundo. Pensamos esta comunidad inicialmente para la comunidad hispanoparlante para facilitar el aprendizaje y generar contenido que sea relevante para las personas que nos desarrollamos en estas funciones.

Podes sumarte a nuestra comunidad en Slack, o bien seguirnos en redes sociales, acceder a todo nuestro contenido y participar en nuestras actividades gratuitas y abiertas. [Todo eso lo encontr√°s en este link](https://linktr.ee/r4hrclub) ü•ù.
