{
  "hash": "98d2a0b07806a18847da55f6cc121d16",
  "result": {
    "markdown": "---\ntitle: \"Cargar Campos de Fecha desde Excel Sin Errores\"\nauthor: \"Checho\"\ndate: \"12/09/2023\"\ncategories: [tipito, tip, análisis, date, fecha]\n---\n\n\n¿A quién no le pasó esto alguna vez?\n\n![](/posts/cargar_fechas_desde_excel/data/phoebe_joey.jpg){fig-align=\"center\" width=\"452\"}\n\nEsto en R muchas veces también nos trae dolores de cabeza así que en esto post vamos a ver cómo podemos solucionar esto.\n\n# El Código\n\n## Paquetes\n\nPara este ejemplo vamos a utilizar 3 paquetes, `openxlsx` que nos permite cargar y guardar archivos de Excel, `dplyr` para manipular y limpiar datos (podés ver un [tutorial acá](https://youtu.be/-AXzusX4Cmo)). También vamos a usar el paquete `janitor` para limpiar los nombres de las columnas a un formato más fácil de utilizar (elimina tildes, pasa todo a minúscula y reemplaza espacios por guiones, por ejemplo).\n\nEl primer paso, en caso que no los tengas aún, es instalar los paquetes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Instalar paquetes\ninstall.packages(\"openxlsx\") # Cargar y guardar archivos de Excel\ninstall.packages(\"dplyr\")    # Manipular y limpiar datos\ninstall.packages(\"janitor\")  # Entre otras cosas, facilitar manipulación de columnas\n```\n:::\n\n\nUna vez que termina la instalación, hay que cargarlos. No vamos a cargar el paquete `janitor` porque sólo vamos a usar una función.\n\nCargar un paquete \"deja activas\" todas las funciones del paquete, lo cual implica un consumo de memoria, muchas veces ínfimo, pero consumo al fin, así que en este caso mostraremos como usar una función sin cargar todas las funciones del paquete.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargar paquetes\nlibrary(openxlsx)\nlibrary(dplyr)\n```\n:::\n\n\n## Los datos\n\nEl caso que usaremos de ejemplo simula ser una base de Postulantes de una búsqueda que llevamos adelante para una vacante de People Analytics. Primero carguemos los datos que están almacenados en una carpeta llamada `data`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargar los datos en R\ndatos <- read.xlsx(\"data/Postulantes.xlsx\") %>% \n  janitor::clean_names() # Usamos solo la función clean_names() sin cargar todo el paquete janitor\n```\n:::\n\n\nAhora veamos los datos que tenemos cargados:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ver los datos cargados\ndatos\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  fecha_sourcing         busqueda   nombre apellido   telefono            mail\n1          44729 People Analytics   Sergio   Garcia 1111111111 sergio@d4hr.com\n2          44729 People Analytics  Daniela   Garcia 2222222222            <NA>\n3          44729 People Analytics    Yanel Paulette 3333333333            <NA>\n4          44729 People Analytics    Carla   Cirone 4444444444            <NA>\n5          44729 People Analytics Santiago  Lardone 5555555555            <NA>\n  empresa            puesto   github          twitter\n1    R4HR Master of Puppets chechoid @sergiogarciamor\n2    R4HR Master of Puppets     <NA>             <NA>\n3    R4HR Master of Puppets     <NA>             <NA>\n4    R4HR Master of Puppets     <NA>             <NA>\n5    R4HR Master of Puppets     <NA>             <NA>\n                                                  linkedin   fuente status\n1            https://www.linkedin.com/in/sergiogarciamora/  Twitter Activo\n2        https://www.linkedin.com/in/claudiadanielagarcia/ Linkedin Activo\n3               https://www.linkedin.com/in/yanelpaulette/ Linkedin Activo\n4       https://www.linkedin.com/in/carla-cirone-0566b095/ Linkedin Activo\n5 https://www.linkedin.com/in/santiagolardonequinodozrrhh/ Linkedin Activo\n  fecha_ultimo_contacto\n1                 44739\n2                 44739\n3                 44739\n4                 44739\n5                 44739\n```\n:::\n\n```{.r .cell-code}\n# Hagamos un zoom en los campos que contienen fechas\ndatos %>% \n  select(fecha_sourcing, fecha_ultimo_contacto)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  fecha_sourcing fecha_ultimo_contacto\n1          44729                 44739\n2          44729                 44739\n3          44729                 44739\n4          44729                 44739\n5          44729                 44739\n```\n:::\n:::\n\n\nEn la tabla anterior vemos que el valor que obtenemos en la primera columna es `44729`, el número que representa a la fecha `17/6/22` como podemos apreciar en el archivo original:\n\n![](data/excel_vista.png)\n\nAhora veremos cómo podemos resolver este problema.\n\n## Solución\n\nPara empezar, seleccionemos algunas columnas nomás usando la función `select()`. Vamos a seleccionar los campos de `fecha_sourcing` que representa cuándo inició la búsqueda, `nombre`, `empresa`, y `fecha_ultimo_contacto` donde anotamos cuándo fue la última vez que nos pusimos en contacto con cada persona.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Seleccionar los campos con fechas, nombre y empres y sobreescribo el data frame\ndatos <- datos %>% \n  select(fecha_sourcing, nombre, empresa, fecha_ultimo_contacto)\n\n# Ver el nuevo dataframe\ndatos\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  fecha_sourcing   nombre empresa fecha_ultimo_contacto\n1          44729   Sergio    R4HR                 44739\n2          44729  Daniela    R4HR                 44739\n3          44729    Yanel    R4HR                 44739\n4          44729    Carla    R4HR                 44739\n5          44729 Santiago    R4HR                 44739\n```\n:::\n:::\n\n\nAhora nos quedamos con un data frame de 5 filas y 4 columnas.\n\nPara transformar el campo `fecha_sourcing` de un formato numérico a un formato de tipo fecha, vamos a usar la función `as.Date()` de R base.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transformar el campo fecha_sourcing a tipo fecha\ndatos %>% \n  mutate(fecha_sourcing = as.Date(fecha_sourcing,          # Sobrescribimos el campo fecha_sourcing\n                                  origin = \"1899-12-30\",   # Fecha de origen para el conteo\n                                  tz = \"UTC\"))             # Huso horario\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  fecha_sourcing   nombre empresa fecha_ultimo_contacto\n1     2022-06-17   Sergio    R4HR                 44739\n2     2022-06-17  Daniela    R4HR                 44739\n3     2022-06-17    Yanel    R4HR                 44739\n4     2022-06-17    Carla    R4HR                 44739\n5     2022-06-17 Santiago    R4HR                 44739\n```\n:::\n:::\n\n\nEl trabajo con fechas siempre fue complejo desde el punto de vista del análisis de datos. Especialmente con los distintos formatos que se usan en el mundo, por ejemplo `dd/mm/aaaa` en Sudamérica, o `mm/dd/aaaa` en Estados Unidos por ejemplo. R, cuando un campo fecha carga correctamente, lo transforma a un formato ISO 8601 `aaaa-mm-dd`.\n\n![](data/perfect_date.jpg){width=\"323\"}\n\nEl primer número que obtuvimos cuando cargamos la tabla en R (el `44729`) significa que desde el 30 de diciembre de 1899 hasta el 17 de Junio de 2022 pasaron 44.729 días. De ahí el número que obtuvimos en la carga.\n\nEl parámetro `tz`, nos permite especificar el huso horario del registro. Para algunos casos puede ser relevante, pero para la mayoría de los casos de uso que le daríamos en RRHH, es un parámetro que podemos incluir o no.\n\n### Cambiar varios campos a la vez\n\nCon la tabla que estamos usando de ejemplo, no hay mucho problema en repetir el paso ya que únicamente tenemos dos campos de fechas. ¿Pero qué pasa si tenemos 6, 7, o más campos de fechas en un archivo? Repetir estos pasos manualmente va a hacer confuso nuestro código y más complejo de mantener.\n\nVeamos una forma de cambiar todos los campos de fecha usando algunas funciones auxiliares del paquete `dplyr`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cambios los dos campos de fecha a la vez\ndatos %>% \n  mutate(across(starts_with(\"fecha\"),\n                ~as.Date(.x,\n                         tz = \"UTC\",\n                         origin = \"1899-12-30\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  fecha_sourcing   nombre empresa fecha_ultimo_contacto\n1     2022-06-17   Sergio    R4HR            2022-06-27\n2     2022-06-17  Daniela    R4HR            2022-06-27\n3     2022-06-17    Yanel    R4HR            2022-06-27\n4     2022-06-17    Carla    R4HR            2022-06-27\n5     2022-06-17 Santiago    R4HR            2022-06-27\n```\n:::\n:::\n\n\nEn este caso usamos la función `across()` para indicarle a R que ejecute la función (en este ejemplo, `as.Date()`) en todas las variables que cumplan con algún criterio. En este ejemplo, nos valemos de otra función auxiliar, `starts_with()`, que como su nombre en inglés lo indica, va a ejecutar la función en todas las columnas que empiecen con el término `\"fecha\"`.\n\nEste ejemplo funciona porque los campos que contienen una fecha comienzan con el nombre *fecha*. Por eso es importante al momento de diseñar una base de datos, un formulario, o cualquier registro que utilicemos para que haya una consistencia entre los nombres de los campos para facilitarnos posteriormente el proceso y análisis de datos, independiemente del software que utilicemos.\n\nPresten atención a que delante de la función `as.Date()` usamos este símbolo (`~` ) llamado virgulilla (en Neuquén, Argentina, le dríamos ñuflo). Con ese símbolo le indicamos a R que esa va a ser la función que vamos a replicar en todos los campos.\n\nEl argumento `.x`, representa a todas las columnas que habíamos seleccionado con las funciones `across()` y `starts_with()`. Es decir que es la forma que tiene R de simplificar cuáles son los campos que tiene que transformar sin que le tengamos que indicar uno por uno cuales son.\n\n# Todo lo anterior en un tweet\n\nEste post lo hice originalmente en 2022, y recuerdo que al día siguiente de haberlo publicado, me encontré con el paquete `anytime` desarrollado por [Dirk Eddelbuettel](https://dirk.eddelbuettel.com/), que resuelve muchos de estos inconvenientes en un tuit (es decir, con pocas líneas de código).\n\nCarguemos los datos nuevamente:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargar los datos en R\ndatos <- read.xlsx(\"data/Postulantes.xlsx\") %>% \n  janitor::clean_names() # Usamos solo la función clean_names() sin cargar todo el paquete janitor\n\n# Seleccionemos dos campos nada más\ndatos2 <- datos %>% \n  select(apellido, fecha_ultimo_contacto)\n```\n:::\n\n\nAhora instalemos el paquete `anytime`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Instalar 'anytime'\ninstall.packages(\"anytime\")\n```\n:::\n\n\nEl próximo paso es cargar el paquete.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargar anytime\nlibrary(anytime)\n```\n:::\n\n\nPara corregir la forma en que el campo fecha está cargado desde Excel sólo tenemos que hacer lo siguiente:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sobreescribir el campo de fecha\ndatos2 <- datos2 %>% \n  mutate(fecha_ultimo_contacto = anydate(fecha_ultimo_contacto))\n\n# Ver los resultados\ndatos2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  apellido fecha_ultimo_contacto\n1   Garcia            2092-06-28\n2   Garcia            2092-06-28\n3 Paulette            2092-06-28\n4   Cirone            2092-06-28\n5  Lardone            2092-06-28\n```\n:::\n:::\n\n\nEn este ejemplo, el año no es el correcto y si prestamos atención en vez de 27 de Junio, nos arroja **28 de Junio**. Esto es un efecto de cuál es la fecha que se toma de origen: en los ejemplos anteriores veíamos que definíamos `1899-12-30`, en cambio el paquete `anytime` usa `1/1/1970`. Esto explica en parte los problemas que nos causa Excel con las fechas (y R también, digamos todo).\n\nIncluso el origen del archivo puede ser un problema. Por ejemplo, si genero un archivo de Excel o un csv en Argentina, donde usamos el formato de fecha `dd/mm/yyyy` (día, mes, año), y se lo mando a una persona en Estados Unidos donde usan el formato de fecha `mm/dd/yyyy` (mes, día, año) puede generar que algo que funciona en un lado, no funcione en otro.\n\nPor eso si bien este ejemplo no es perfecto, quería compartirlo porque el código es súper simple, y además a Dirk, el creador del paquete, le encantó este meme:\n\n![](/posts/cargar_fechas_desde_excel/data/anytime_meme.webp){width=\"502\"}\n\nAsí que si bien trabajar con fechas y horas siempre es complejo, independientemente si estás trabajando con R, Python, Excel, o Power BI. Con este post queríamos mostrar una forma de hacerlo. También existe el paquete `lubridate` que permite trabajar y hacer cálculos con fechas y del cual hicimos un tutorial que podés ver en [YouTube](https://youtu.be/rU5153nki7c) y descargar el código desde [GitHub](https://github.com/r4hr/club_de_r/blob/master/Sesion_27_Lubridate.R).\n\nSi bien, los paquetes como `lubridate` o `anytime` son más intuitivos de usar, a veces por un tema de falta de mantenimiento, versiones diferentes, o performance, conviene usar las funciones de R base.\n\n# La comunidad de R4HR 🥝\n\nR4HR, la comunidad que también llamamos el Club de R para RRHH es una comunidad de aprendizaje de programación en R destinada para todas las personas que trabajan o quieran trabajar en RRHH en todas partes del mundo. Pensamos esta comunidad inicialmente para la comunidad hispanoparlante para facilitar el aprendizaje y generar contenido que sea relevante para las personas que nos desarrollamos en estas funciones.\n\nPodes sumarte a nuestra comunidad en Slack, o bien seguirnos en redes sociales, acceder a todo nuestro contenido y participar en nuestras actividades gratuitas y abiertas. [Todo eso lo encontrás en este link](https://linktr.ee/r4hrclub) 🥝.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}